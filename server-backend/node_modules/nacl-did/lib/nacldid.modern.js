import{Resolver as e,parse as r}from"did-resolver";import t from"tweetnacl";import i from"tweetnacl-util";import{convertKeyPair as n,convertPublicKey as o}from"ed2curve-esm";function s(){return(s=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}var a="x25519-xsalsa20-poly1305",c="xsalsa20-poly1305",d=async function(e){return t.randomBytes(e)};function p(e){d=e}function u(e){return"string"==typeof e?i.decodeUTF8(e):e}function y(e){return i.encodeBase64(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}function h(e){return i.decodeBase64(function(e){switch(e.length%4){case 0:return e;case 2:return e+"==";case 3:return e+"=";default:throw new Error("Invalid base64url encoded string")}}(e).replace(/-/g,"+").replace(/_/g,"/"))}var l=y(i.decodeUTF8(JSON.stringify({typ:"JWT",alg:"Ed25519"})));class f{constructor(r,t){this.did="did:nacl:"+y(r.publicKey),this.privateKey=r.secretKey,this.publicKey=r.publicKey;var i=n(r);this.encPublicKey=i.publicKey,this.encPrivateKey=i.secretKey,this.resolver=t||new e({nacl:P})}toJSON(){return{did:this.did,privateKey:i.encodeBase64(this.privateKey)}}sign(e){return{data:e,signer:this.did,signature:t.sign.detached(u(e),this.privateKey)}}verify(e){return t.sign.detached.verify(u(e.data),e.signature,this.publicKey)}createJWT(e){var r=Math.floor(Date.now()/1e3),t=l+"."+y(i.decodeUTF8(JSON.stringify(s({},e,{iss:this.did,iat:r}))));return t+"."+y(this.sign(t).signature)}async resolveEncryptionPublicKey(e){try{var r=await this.resolver.resolve(e);if(r){var t=r.publicKey.find(e=>"Curve25519EncryptionPublicKey"===e.type);if(t&&t.publicKeyBase64)return i.decodeBase64(t.publicKeyBase64)}}catch(e){}}async openSession(e,r){if(void 0===r&&(r=!1),e===this.did)return new x(this);var n=await this.resolveEncryptionPublicKey(e);if(!n){if("string"!=typeof r){if(!0===r)return new x(this);throw new Error("Recipient DID "+e+" does not have a valid encryption publicKey")}n=i.decodeBase64(r)}return new w(this.did,e,i.encodeBase64(n),t.box.before(n,this.encPrivateKey))}async encrypt(e,r){if(e===this.did){var n=await d(t.secretbox.nonceLength),o=t.secretbox(u(r),n,this.encPrivateKey);return{to:e,nonce:i.encodeBase64(n),ciphertext:i.encodeBase64(o),version:"xsalsa20-poly1305"}}var s=B(e),a=await d(t.box.nonceLength),c=t.box(u(r),a,s,this.encPrivateKey);return{to:e,from:this.did,toPublicKey:i.encodeBase64(s),nonce:i.encodeBase64(a),ciphertext:i.encodeBase64(c),version:"x25519-xsalsa20-poly1305"}}decrypt(e){var{from:r,to:n,nonce:o,ciphertext:s,version:a}=e;switch(a){case"x25519-xsalsa20-poly1305":if(r!==this.did&&n!==this.did)throw new Error("This was not encrypted to "+this.did);var c=r===this.did?n:r;if(!c)throw new Error("No counter party included");return i.encodeUTF8(t.box.open(i.decodeBase64(s),i.decodeBase64(o),B(c),this.encPrivateKey));case"xsalsa20-poly1305":if(n!==this.did)throw new Error("This was not encrypted to "+this.did);return i.encodeUTF8(t.secretbox.open(i.decodeBase64(s),i.decodeBase64(o),this.encPrivateKey));default:throw new Error("We do not support "+a)}}}class v{constructor(e){this.to=e}}class w extends v{constructor(e,r,t,i){super(r),this.from=e,this.sharedKey=i,this.toPublicKey=t,this.template={toPublicKey:t,from:e,to:r,version:"x25519-xsalsa20-poly1305"}}async encrypt(e){var r=await d(t.box.nonceLength),n=t.box.after(u(e),r,this.sharedKey);return s({},this.template,{nonce:i.encodeBase64(r),ciphertext:i.encodeBase64(n)})}decrypt(e){var{from:r,to:n,nonce:o,ciphertext:s,version:a}=e;if("x25519-xsalsa20-poly1305"!==a)throw new Error("We do not support "+a);if(r!==this.from&&n!==this.to)throw new Error("This was not encrypted to us");return i.encodeUTF8(t.box.open.after(i.decodeBase64(s),i.decodeBase64(o),this.sharedKey))}}class x extends v{constructor(e){super(e.did),this.id=e}async encrypt(e){return this.id.encrypt(this.to,e)}decrypt(e){return this.id.decrypt(e)}}function K(e){var r=g(e.signer);return t.sign.detached.verify(u(e.data),e.signature,r)}function b(e){var r=e.split(".");if(r[0]!==l)throw new Error("Incorrect JWT Type");var t=JSON.parse(i.encodeUTF8(h(r[1])));if(!t.iss)throw new Error("JWT did not contain an `iss`");if(void 0!==t.exp){if("number"!=typeof t.exp)throw new Error("Invalid exp in JWT "+t.exp+" = "+typeof t.exp);if(1e3*t.exp<(new Date).getTime())throw new Error("JWT expired on: "+t.exp)}if(K({signer:t.iss,data:r[0]+"."+r[1],signature:h(r[2])}))return{issuer:t.iss,payload:t};throw new Error("JWT could not be verified")}function g(e){return h(r(e).id)}function B(e){if(!e.match(/^did:nacl:/))throw new Error("Only nacl dids are supported");return o(g(e))}function m(e){return new f(t.sign.keyPair(),e)}function E(e,r){var n=new f(t.sign.keyPair.fromSecretKey(i.decodeBase64(e.privateKey)),r);if(n.did!==e.did)throw new Error("Provided PrivateKey does not match the DID");return n}async function P(e,r){var t=h(r.id);return{"@context":"https://w3id.org/did/v1",id:e,publicKey:[{id:e+"#key1",type:"ED25519SignatureVerification",owner:e,publicKeyBase64:i.encodeBase64(t)},{id:e+"#key2",type:"Curve25519EncryptionPublicKey",owner:e,publicKeyBase64:i.encodeBase64(o(t))}],authentication:[{type:"ED25519SigningAuthentication",publicKey:e+"#key1"}]}}export{a as ASYM_CIPHER_VERSION,v as EncryptedSession,f as NaCLIdentity,c as SYM_CIPHER_VERSION,m as createIdentity,h as decodeBase64Url,B as didToEncPubKey,y as encodeBase64Url,E as loadIdentity,u as normalizeClearData,P as resolver,p as setRandomBytesSource,b as verifyJWT,K as verifySignature};
//# sourceMappingURL=nacldid.modern.js.map
