
// File: contracts/Owned.sol

pragma solidity ^0.5.16;

contract Owned {
    address owner;
    
    modifier checkOwned() {
        require(isOwner(msg.sender));
        _;
    }

    //This call is executed always when we instanciate a new Proxy
    constructor() public {
        owner = msg.sender;
    }

    function isOwner(address addr) private view returns(bool) {
        return addr == owner;
    }
}

// File: contracts/DidResolver.sol

pragma solidity ^0.5.16;



contract DidResolver is Owned {
    
    struct PublicKey {
        string algh;
        string publicKeyPem;
    }

    struct DidDocument {
        string context;
        PublicKey pubKey;
    }
    
    mapping(address => address) private identities;
    mapping(address => DidDocument) private document;

    function canAccess() internal view returns(bool){
        bool verified = false;
        if (msg.sender == 0x1c9Db4eb69522Ca59651eC8D1Ed810DccFe2781d){
            verified = true;
        }
        return verified;
    }

    function isRegistered(address id) internal view returns(address){
        address identity = identities[id];

        //Checkinf if identity already exists
        if (identity != address(0)){
            return identity;
        }
        return address(0);
    }

    function registerID(address id, string memory pubKey) public checkOwned returns(address){
        address identity = address(0);

        if (isRegistered(id) == address(0)){
            identities[id] = id;
            // I am not checking if address id is free in network
            PublicKey memory pk = PublicKey({algh: 'RsaVerificationKey2048',
                                      publicKeyPem: pubKey });

            DidDocument memory doc = DidDocument({context:'https://www.w3.org/ns/did/v1', pubKey: pk});
            document[id] = doc;
            identity = id;
        }
        return identity;
    }

    //Limit access to MetaIDManager address
    function resolveDID(address didToResolve) public view checkOwned returns(string memory) {
        string memory pubKey = "";
        if (isRegistered(didToResolve) != address(0)){
            DidDocument memory doc = document[didToResolve];
            pubKey = doc.pubKey.publicKeyPem;
        }
        return pubKey;
    }
    
}

// File: contracts/IdentityProxy.sol

pragma solidity ^0.5.16;


contract IdentityProxy is Owned {
    event ExternalOperation(
        address indexed dest,
        uint value,
        bytes data
    );

    event Paid(
        address indexed sender,
        uint value
    );

    function () external payable {
        emit Paid(msg.sender, msg.value);
    }

    function forward(address dest, uint value, bytes memory data) public checkOwned {
        require(execute(dest, value, data));
        emit ExternalOperation(dest, value, data);
    }

    function execute(address dest, uint value, bytes memory data) internal returns(bool success) {
        assembly {
            success := call(gas, dest, value, add(data, 0x20), mload(data), 0, 0)
        }
    }
}

// File: contracts/IdentityController.sol

pragma solidity ^0.5.16;



contract IdentityController {

    DidResolver resolver = new DidResolver();

    //assigning DID to Proxy address
    mapping(address => IdentityProxy) idproxies;

    event IdentityCreated(
        address indexed creator,
        address owner
    );

    modifier checkOwned(IdentityProxy proxy, address owner) {
        require(isOwner(address(proxy), owner));
        _;
    }

    function createIdentity(address owner, string memory pubKey) public returns(address) {
        address registeredID = resolver.registerID(owner, pubKey);
        //Trying to register user
        if (registeredID == address(0)){
            IdentityProxy proxy = new IdentityProxy();
            idproxies[owner] = proxy;
            emit IdentityCreated(msg.sender,owner);
        }
        
        return registeredID;
    }
/*
    function externalTransaction(address owner, address destinationContract, uint value, bytes memory data) public returns(bool) {
        forwardTo(idproxies[owner], owner, destinationContract, value, data);
        return true;
    }
*/
    function forwardTo(IdentityProxy proxy, address owner, address destinationContract, uint value, bytes memory data) public{
        proxy.forward(destinationContract, value, data);
    }

    function isOwner(address proxy, address owner) private view returns(bool) {
        bool owned = false;
        if (address(idproxies[owner]) == proxy){
            owned = true;
        }
        return owned;
    }

}
